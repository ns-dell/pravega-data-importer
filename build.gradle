/*
 * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 */

plugins {
    id "java"
    id "application"
    id "maven-publish"
    id 'com.github.johnrengelman.shadow' version "${shadowVersion}"
    id "com.github.spotbugs" version "${spotbugsPluginVersion}"
    id "io.franzbecker.gradle-lombok" version "${gradleLombokPluginVersion}"
    id "checkstyle"
    id "jacoco"
}

tasks.withType(JavaCompile) {
    options.release = 11
}

apply from: "$rootDir/gradle/checkstyle.gradle"
apply from: "$rootDir/gradle/spotbugs.gradle"
apply from: "$rootDir/gradle/jacoco.gradle"

group = "io.pravega"
description = "Pravega Data Importer"
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

// Allow main class name to be specified with -PmainClass=xxx.
application {
    mainClassName = project.hasProperty("mainClass") ? getProperty("mainClass") : "io.pravega.dataimporter.Main"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.jfrog.org/jfrog-dependencies"
    }
    maven {
        url "https://repository.apache.org/snapshots"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

configurations {
    flinkShadowJar // dependencies which go into the shadowJar

    // always exclude these (also from transitive dependencies) since they are provided by Flink
    flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
    flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
    flinkShadowJar.exclude group: 'org.slf4j'
    flinkShadowJar.exclude group: 'log4j'
}

configurations.all {
    resolutionStrategy {
        force "com.google.guava:guava:" + guavaVersion
    }
}

shadowJar {
    configurations = [project.configurations.flinkShadowJar]
    zip64 true
}

lombok {
    version = lombokVersion
}

dependencies {
    // --------------------------------------------------------------
    // Compile-time dependencies that should NOT be part of the
    // shadow jar and are provided in the lib folder of Flink
    // --------------------------------------------------------------
    compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: "${spotbugsVersion}"
    testCompileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: "${spotbugsVersion}"
    compileOnly 'org.projectlombok:lombok:' + "${lombokVersion}"
    testCompileOnly 'org.projectlombok:lombok:' + "${lombokVersion}"
    annotationProcessor 'org.projectlombok:lombok:' + "${lombokVersion}"
    testAnnotationProcessor 'org.projectlombok:lombok:' + "${lombokVersion}"
    implementation "org.apache.flink:flink-java:${flinkVersion}"
    implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
    implementation "org.apache.flink:flink-connector-kafka:${flinkVersion}"
    implementation "org.apache.flink:flink-table-api-java-bridge:${flinkVersion}"
    implementation "org.apache.flink:flink-table-planner_${flinkScalaVersion}:${flinkVersion}"
    implementation "org.apache.flink:flink-clients:${flinkVersion}"
    implementation "org.apache.flink:flink-runtime-web:${flinkVersion}"
    implementation "org.apache.flink:flink-core:${flinkVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jApiVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "org.scala-lang:scala-compiler:${scalaCompilerVersion}"
    implementation "info.picocli:picocli:${picocliVersion}"
    implementation "io.pravega:pravega-shared-security:${pravegaVersion}"
    implementation "io.pravega:pravega-client:${pravegaVersion}"
    implementation "io.pravega:pravega-shared-protocol:${pravegaVersion}"
    implementation "io.pravega:pravega-keycloak-client:${pravegaCredentialsVersion}"
    implementation("io.pravega:pravega-connectors-flink-${flinkShortVersion}_${flinkScalaVersion}:${pravegaFlinkConnectorVersion}") {
        transitive = false
    }
    testImplementation "net.mguenther.kafka:kafka-junit:${kafkaJunitVersion}"
    testImplementation "io.pravega:pravega-standalone:${pravegaVersion}"
    testImplementation "io.pravega:pravega-test-integration:${pravegaVersion}"

    testImplementation "org.apache.flink:flink-test-utils:${flinkVersion}"

    flinkShadowJar "io.pravega:pravega-connectors-flink-${flinkShortVersion}_${flinkScalaVersion}:${pravegaFlinkConnectorVersion}"
    flinkShadowJar "io.pravega:pravega-keycloak-client:${pravegaCredentialsVersion}"
    flinkShadowJar "org.apache.flink:flink-connector-kafka:${flinkVersion}"
    flinkShadowJar "com.google.guava:guava:${guavaVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"
    testCompileOnly "junit:junit:${junitVersion}"
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
}

// make compileOnly dependencies available for tests:
sourceSets {
    main.compileClasspath += configurations.flinkShadowJar
    main.runtimeClasspath += configurations.flinkShadowJar

    test.compileClasspath += configurations.flinkShadowJar
    test.runtimeClasspath += configurations.flinkShadowJar

    javadoc.classpath += configurations.flinkShadowJar
}

run.classpath = sourceSets.main.runtimeClasspath

jar {
    manifest {
        attributes 'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version')
    }
}

clean.doFirst {
    delete "${flinkShadowJarDirectory}/" + "pravega-data-importer" + "-" + "${version}-all" + ".jar"
    println "Deleting existing ${flinkShadowJarDirectory}/" + "pravega-data-importer" + "-" + "${version}-all" + ".jar"
}

task copyToLib(type: Copy) {
    into "${flinkShadowJarDirectory}"
    from shadowJar
}

test {
    useJUnitPlatform()
}

build.dependsOn(copyToLib)